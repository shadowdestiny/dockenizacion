pipeline {
    environment {
        EM_ENVIRONMENT = "prod"

        RANCHER_STACK_NAME = "euromillions-prod"

        RANCHER_ENV_URL = "http://34.247.7.73:8080/v2-beta/projects/1a15"
        RANCHER_ENV_KEY = credentials('RANCHER_ENV_KEY_PROD')
        RANCHER_ENV_SECRET = credentials('RANCHER_ENV_SECRET_PROD')
        RANCHER_COMPOSE_CMD_BASE = "rancher-compose --url $RANCHER_ENV_URL --access-key $RANCHER_ENV_KEY --secret-key $RANCHER_ENV_SECRET -p ${RANCHER_STACK_NAME} -f docker-compose.prod.yml -f docker-compose.rollback.yml -r rancher-compose.prod.yml -e .env.prod"

        ANSIBLE_VAULT_PASSWORD_FILE = credentials('ansible_vault_password_web')
    }
    agent {
        label 'aws-slave'
    }
    options {
        skipStagesAfterUnstable()
        timeout( time: 1, unit: 'HOURS' )
    }
    parameters {
            string(name: 'BUILD_TARGET', defaultValue: '', description: 'Enter the BUILD number to rollback')
        }
    stages {
        stage('rollback') {
            environment {
                BUILD_TAG_TARGET = "${env.EM_ENVIRONMENT}_${params.BUILD_TARGET}"
            }
            steps {
                // send build started notifications
                slackSend (color: '#FFFF00', message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")

                script {
                    def build_target = params.BUILD_TARGET
                    assert build_target.isNumber()
                }

                sh('ansible-playbook --vault-password-file ${ANSIBLE_VAULT_PASSWORD_FILE} ${WORKSPACE}/devOps/playbook_jenkins.yml')

                sh('${RANCHER_COMPOSE_CMD_BASE} up -d -p -u')

                sh('${RANCHER_COMPOSE_CMD_BASE} up -d -p -u --force-upgrade web php phpcron')
            }
        }
    }
    post {
        always {
            deleteDir() /* clean up our workspace */
        }
        success {
            slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }

        failure {
            slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }
    }
}