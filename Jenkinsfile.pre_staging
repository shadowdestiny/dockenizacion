pipeline {
    environment {
        EM_ENVIRONMENT = "pre_staging"
        BUILD_IMAGE_TAG = "${env.EM_ENVIRONMENT}_${env.BUILD_NUMBER}"

        DOCKER_HUB_CREDENTIALS = credentials('docker_hub')
        DOCKER_HUB_USER = "${env.DOCKER_HUB_CREDENTIALS_USR}"
        DOCKER_HUB_PASSWORD = "${env.DOCKER_HUB_CREDENTIALS_PSW}"

        RANCHER_STACK_NAME = "euromillions-${env.RANCHER_SUFFIX}"

        RANCHER_ENV_URL = "http://34.247.7.73:8080/v2-beta/projects/1a7"
        RANCHER_ENV_KEY = credentials('RANCHER_ENV_KEY_STAGING')
        RANCHER_ENV_SECRET = credentials('RANCHER_ENV_SECRET_STAGING')
        RANCHER_COMPOSE_CMD_BASE = "rancher-compose --url $RANCHER_ENV_URL --access-key $RANCHER_ENV_KEY --secret-key $RANCHER_ENV_SECRET -p ${RANCHER_STACK_NAME} -f docker-compose.prod.yml -f docker-compose.pre_staging.yml -r rancher-compose.pre_staging.yml -e .env.pre_staging"
    }
    agent {
        label 'aws-slave'
    }
    options {
        skipStagesAfterUnstable()
        timeout( time: 1, unit: 'HOURS' )
    }
    stages {
        stage('pre-build') {
            steps {
                // send build started notifications
                // slackSend (color: '#FFFF00', message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")

                sh('chmod +x devOps/ci/pre_build.sh; devOps/ci/pre_build.sh')

                sh('echo ${RANCHER_STACK_NAME}')
            }
        }
        stage('test') {
                steps {
                    sh('chmod +x devOps/ci/test.sh; devOps/ci/test.sh')
                }
                post {
                    always {
                        // Shutdown test
                        sh('sudo docker-compose -p test -f docker-compose.test.yml down')

                        //Publish junit tests
                        junit "src/tests/junit.xml"
                    }
                }
            }
            stage('build static images') {
                parallel {
                    stage('build cron image') {
                        steps {
                            sh('sudo docker build -t panamedialottery/euromillions-php:cron_${BUILD_IMAGE_TAG} -f devOps/docker/php/Dockerfile --target cron .')
                            sh('sudo docker login --username $DOCKER_HUB_USER --password $DOCKER_HUB_PASSWORD')
                            sh('sudo docker push panamedialottery/euromillions-php:cron_${BUILD_IMAGE_TAG}')
                        }
                    }
                    stage('build web image') {
                        steps {
                            sh('sudo docker build -t panamedialottery/euromillions-web:${BUILD_IMAGE_TAG} --target staging devOps/docker/web')
                            sh('sudo docker login --username $DOCKER_HUB_USER --password $DOCKER_HUB_PASSWORD')
                            sh('sudo docker push panamedialottery/euromillions-web:${BUILD_IMAGE_TAG}')
                        }
                    }
                    stage('build util-nodejs image') {
                        steps {
                            sh('sudo docker build -t panamedialottery/euromillions-util-nodejs devOps/docker/util-nodejs')
                        }
                    }
                }
            }
            stage('build frontend and php') {
                parallel {
                    stage('build react'){
                        steps{
                            sh('sudo docker run --rm -v $(pwd)/src:/var/www -v /tmp:/tmp -e "NPM_CONFIG_CACHE=/tmp/npm_cache" panamedialottery/euromillions-util-nodejs ./provision-react.sh')
                        }
                    }
                    stage('build grunt'){
                        steps{
                            sh('sudo docker run --rm -v $(pwd)/src:/var/www -v /tmp:/tmp -e "NPM_CONFIG_CACHE=/tmp/npm_cache" panamedialottery/euromillions-util-nodejs ./provision-grunt.sh')
                        }
                    }
                    stage('composer php'){
                        steps{
                            sh('sudo docker run --rm -v $(pwd)/src:/var/www -v /tmp:/tmp -e "COMPOSER_HOME=/tmp/composer_home" panamedialottery/euromillions-php:tools composer install --no-progress --no-dev --optimize-autoloader')
                        }
                    }
                }
            }
            stage('build php image') {
                steps {
                    sh('sudo docker build -t panamedialottery/euromillions-php:${BUILD_IMAGE_TAG} -f devOps/docker/php/Dockerfile --target staging .')
                    sh('sudo docker login --username $DOCKER_HUB_USER --password $DOCKER_HUB_PASSWORD')
                    sh('sudo docker push panamedialottery/euromillions-php:${BUILD_IMAGE_TAG}')
                }
            }
        }
    }
}