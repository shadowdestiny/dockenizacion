pipeline {
    environment {
        EM_ENVIRONMENT = "pre_staging"
        EM_DOMAIN = "${env.EM_DOMAIN}"

        BUILD_IMAGE_TAG = "${env.RANCHER_SUFFIX}_${env.BUILD_NUMBER}"
        TARGET_IMAGE_TAG = "${env.RANCHER_SUFFIX}"

        DOCKER_HUB_CREDENTIALS = credentials('docker_hub')
        DOCKER_HUB_USER = "${env.DOCKER_HUB_CREDENTIALS_USR}"
        DOCKER_HUB_PASSWORD = "${env.DOCKER_HUB_CREDENTIALS_PSW}"

        RANCHER_STACK_NAME = "euromillions-${env.RANCHER_SUFFIX}"

        RANCHER_ENV_URL = "http://34.247.7.73:8080/v2-beta/projects/1a7"
        RANCHER_ENV_KEY = credentials('RANCHER_ENV_KEY_STAGING')
        RANCHER_ENV_SECRET = credentials('RANCHER_ENV_SECRET_STAGING')
        RANCHER_COMPOSE_CMD_BASE = "rancher-compose --url $RANCHER_ENV_URL --access-key $RANCHER_ENV_KEY --secret-key $RANCHER_ENV_SECRET -p ${RANCHER_STACK_NAME} -f docker-compose.pre_staging.yml -r rancher-compose.pre_staging.yml -e .env.pre_staging"

        ANSIBLE_VAULT_PASSWORD_FILE = credentials('ansible_vault_password_web')
    }
    agent {
        label 'aws-slave'
    }
    options {
        skipStagesAfterUnstable()
        timeout( time: 1, unit: 'HOURS' )
    }
    stages {
        stage('post-deploy') {
             environment {
                RANCHER_API_URL = "http://34.247.7.73:8080/v2-beta/schemas"
                RANCHER_TARGET_ENVIRONMENT = "1a7"
                RANCHER_API_ACCESS_KEY = credentials('RANCHER_API_ACCESS_KEY_STAGING')
                RANCHER_API_SECRET_KEY = credentials('RANCHER_API_SECRET_KEY_STAGING')
                RANCHER_CMD_BASE = "rancher -url ${env.RANCHER_API_URL} --env ${env.RANCHER_TARGET_ENVIRONMENT} --access-key ${env.RANCHER_API_ACCESS_KEY} --secret-key ${env.RANCHER_API_SECRET_KEY}"
            }
            steps {
                sh("""
                    script --return --quiet --command \"${RANCHER_CMD_BASE} exec ${RANCHER_STACK_NAME}-web-php-1 bash /post-deploy.sh; exit $? \"
                """)
            }
        }
    }
    post {
        always {
            deleteDir()
        }
        success {
            slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }

        failure {
            slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }
    }
}