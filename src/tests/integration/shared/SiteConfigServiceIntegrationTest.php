<?php
namespace tests\integration\shared;

use EuroMillions\shared\services\SiteConfigService;
use EuroMillions\web\entities\SiteConfig;
use Money\Money;
use tests\base\DatabaseIntegrationTestBase;

class SiteConfigServiceSpy extends SiteConfigService
{
    public function getConfigEntity()
    {
        return $this->configEntity;
    }
}

class SiteConfigServiceIntegrationTest extends DatabaseIntegrationTestBase
{

    protected $currencyService_dobule;

    /**
     * Child classes must implement this method. Return empty array if no fixtures are needed
     * @return array
     */
    protected function getFixtures()
    {
        return ['site_config'];
    }

    public function setUp()
    {
        $this->currencyService_dobule = $this->getServiceDouble('CurrencyService');
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * method __construct
     * when called
     * should createProperEntity
     */
    public function test___construct_called_createProperEntity()
    {
        $sut = new SiteConfigServiceSpy($this->entityManager);
        $expected = new SiteConfig();
        $expected->initialize([
            'id' => 1,
            'fee' => new Money(35 ,new \Money\Currency('EUR')),
            'fee_to_limit' => new Money(12000, new \Money\Currency('EUR')),
            'default_currency' => new \Money\Currency('EUR')
        ]);

        $this->assertEquals($expected, $sut->getConfigEntity());
    }

    /**
     * method getFee
     * when called
     * should returnProperValue
     */
    public function test_getFee_called_returnProperValue()
    {
        $sut = new SiteConfigService($this->entityManager);
        $actual = $sut->getFee();
        $expected = new Money(35, new \Money\Currency('EUR'));
        $this->assertEquals($expected, $actual);
    }

    /**
     * method getFormatFeeMoney
     * when called
     * should returnProperValueWithFormatCurrency
     */
    public function test_getFormatFeeMoney_called_returnProperValueWithFormatCurrency()
    {
        $expected = '$ 0.15';
        $sut = new SiteConfigService($this->entityManager, $this->currencyService_dobule->reveal());
        $amount = new Money(35, new \Money\Currency('EUR'));
        $converted_value = new Money(15, new \Money\Currency('EUR'));
        list($user_currency, $locale) = $this->exerciseFormatMoney($amount,$converted_value);
        $actual = $sut->getFeeFormatMoney($user_currency,$locale);
        $this->assertEquals($expected,$actual);
    }

    /**
     * method getFeeLimitFormatMoney
     * when called
     * should returnProperValueWithFormatCurrency
     */
    public function test_getFeeLimitFormatMoney_called_returnProperValueWithFormatCurrency()
    {
        $expected = '$ 80';
        $sut = new SiteConfigService($this->entityManager, $this->currencyService_dobule->reveal());
        $amount = new Money(12000, new \Money\Currency('EUR'));
        $converted_value = new Money(8000, new \Money\Currency('EUR'));
        list($user_currency, $locale) = $this->exerciseFormatMoney($amount,$converted_value);
        $actual = $sut->getFeeLimitFormatMoney($user_currency,$locale);
        $this->assertEquals($expected,$actual);
    }

    /**
     * @return array
     */
    private function exerciseFormatMoney(Money $amount, Money $value_converted)
    {
        $user_currency = new \Money\Currency('USD');
        $this->currencyService_dobule->convert($amount, $user_currency)->willReturn($value_converted);
        $locale = 'en_US';
        $this->currencyService_dobule->getSymbol($amount, $locale)->willReturn('$');
        $this->currencyService_dobule->getSymbolPosition($locale, $user_currency)->willReturn(0);
        return array($user_currency, $locale);
    }

}