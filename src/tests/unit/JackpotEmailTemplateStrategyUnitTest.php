<?php


namespace tests\unit;


use EuroMillions\shared\vo\results\ActionResult;
use EuroMillions\web\entities\Currency;
use EuroMillions\web\services\email_templates_strategies\DataLotteryEmailTemplateStrategy;
use EuroMillions\web\vo\EuroMillionsLine;
use Money\Money;
use tests\base\EuroMillionsResultRelatedTest;
use tests\base\UnitTestBase;

class JackpotEmailTemplateStrategyUnitTest extends UnitTestBase
{

    use EuroMillionsResultRelatedTest;

    protected $lotteriesDataService_double;

    public function setUp()
    {
        $this->lotteriesDataService_double = $this->getServiceDouble('LotteriesDataService');
        parent::setUp(); // TODO: Change the autogenerated stub
    }


    /**
     * method getData
     * when called
     * should returnProperDataForJackpotTemplate
     */
    public function test_getData_called_returnProperDataForJackpotTemplate()
    {

        $next_draw = new \DateTime('2016-02-02 20:00:00');
        $last_draw = new \DateTime('2016-01-29 20:00:00');
        $this->lotteriesDataService_double->getNextDateDrawByLottery('EuroMillions')->willReturn($next_draw);
        $time_config = '19:00';
        $draw_day_format_one = $next_draw->format('l');
        $draw_day_format_two = $next_draw->format('j F Y');
        $money = new Money(1000, new \Money\Currency('EUR'));
        $this->lotteriesDataService_double->getNextJackpot('EuroMillions')->willReturn($money);
        $regular_numbers = [1,2,3,4,5];
        $lucky_numbers = [1,2];
        $euroMillionsLine = new EuroMillionsLine($this->getRegularNumbers($regular_numbers),
                                                 $this->getLuckyNumbers($lucky_numbers));
        $result_draw['regular_numbers'] = $euroMillionsLine->getRegularNumbersArray();
        $result_draw['lucky_numbers'] = $euroMillionsLine->getLuckyNumbersArray();
        $this->lotteriesDataService_double->getLastResult('EuroMillions')->willReturn($result_draw);
        $this->lotteriesDataService_double->getLastDrawDate('EuroMillions')->willReturn($last_draw);
        $expected = [
            'jackpot_amount' => $money,
            'draw_day_format_one' => $draw_day_format_one,
            'draw_day_format_two' => $draw_day_format_two,
            'time_close' => $time_config,
            'draw_result' => $result_draw,
            'last_draw_date' => $last_draw
        ];
        $sut = $this->getSut();
        $actual = $sut->getData();
        $this->assertEquals($expected, $actual);
    }

    private function getSut()
    {
        return new DataLotteryEmailTemplateStrategy($this->lotteriesDataService_double->reveal());
    }

}