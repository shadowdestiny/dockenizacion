<?php


namespace EuroMillions\tests\unit;


use EuroMillions\shared\config\Namespaces;
use EuroMillions\shared\vo\results\ActionResult;
use EuroMillions\tests\base\UnitTestBase;
use EuroMillions\tests\helpers\mothers\OrderMother;
use EuroMillions\tests\helpers\mothers\UserMother;
use EuroMillions\web\services\CartService;

class CartServiceUnitTest extends UnitTestBase
{


    private $userRepository_double;
    private $orderStorageStrategy_double;

    protected function getEntityManagerStubExtraMappings()
    {
        return [
            Namespaces::ENTITIES_NS . 'User' => $this->userRepository_double,
        ];
    }
    public function setUp()
    {
        $this->userRepository_double = $this->getRepositoryDouble('UserRepository');
        $this->orderStorageStrategy_double = $this->getInterfaceWebDouble('IPlayStorageStrategy');
        parent::setUp(); // TODO: Change the autogenerated stub
    }



    /**
     * method saveOrderToStorage
     * when called
     * should returnActionResultTrue
     */
    public function test_saveOrderToStorage_called_returnActionResultTrue()
    {
        $expected = new ActionResult(true);
        $order = OrderMother::aJustOrder()->build();
        $user_id = $order->getPlayConfig()[0]->getUser()->getId();
        $this->orderStorageStrategy_double->save($order->toJsonData(), $user_id)->willReturn(new ActionResult(true));
        $sut = $this->getSut();
        $actual = $sut->store($order);
        $this->assertEquals($expected,$actual);
    }

    /**
     * method getOrderFromStorage
     * when calledPassingAKeyValid
     * should returnActionResultTrueWithOrder
     */
    public function test_getOrderFromStorage_calledPassingAKeyValid_returnActionResultTrueWithOrder()
    {
        $order = OrderMother::aJustOrder()->build();
        $expected = new ActionResult(true, $order);
        $user = UserMother::aUserWith50Eur()->build();
        $user_id = $user->getId();
        $this->orderStorageStrategy_double->findByKey($user_id)->willReturn(new ActionResult(true,$order->toJsonData()));
        $this->userRepository_double->find(['id' => $user_id])->willReturn($user);
        $sut = $this->getSut();
        $actual = $sut->get($user_id);
        $this->assertEquals($expected, $actual);
    }


    /**
     * method getOrderFromStorage
     * when calledWithAKeyValidButOrderNoExist
     * should returnActionResultFalseWithErrorMessage
     */
    public function test_getOrderFromStorage_calledWithAKeyValidButOrderNoExist_returnActionResultFalseWithErrorMessage()
    {
        $expected = new ActionResult(false, 'Order doesn\'t exist');
        $user = UserMother::aUserWith50Eur()->build();
        $user_id = $user->getId()->id();
        $this->orderStorageStrategy_double->findByKey($user_id)->willReturn(new ActionResult(false));
        $this->userRepository_double->find(['id' => $user_id])->willReturn($user);
        $sut = $this->getSut();
        $actual = $sut->get($user_id);
        $this->assertEquals($expected,$actual);
    }

    /**
     * method getOrderFromStorage
     * when calledWithAKEyValidButJsonIsMalFormed
     * should returnActionResultFalse
     */
    public function test_getOrderFromStorage_calledWithAKEyValidButJsonIsMalFormed_returnActionResultFalse()
    {
        $expected = new ActionResult(false);
        $user = UserMother::aUserWith50Eur()->build();
        $user_id = $user->getId()->id();
        $this->orderStorageStrategy_double->findByKey($user_id)->willReturn(new ActionResult(true,NULL));
        $this->userRepository_double->find(['id' => $user_id])->willReturn($user);
        $sut = $this->getSut();
        $actual = $sut->get($user_id);
        $this->assertEquals($expected,$actual);
    }

    private function getSut()
    {
        return new CartService(
            $this->getEntityManagerRevealed(),
            $this->orderStorageStrategy_double->reveal()
        );
    }



}