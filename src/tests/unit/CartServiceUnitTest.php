<?php


namespace tests\unit;


use EuroMillions\shared\config\Namespaces;
use EuroMillions\shared\vo\results\ActionResult;
use tests\base\UnitTestBase;
use tests\helpers\mothers\OrderMother;
use tests\helpers\mothers\UserMother;

class CartServiceUnitTest extends UnitTestBase
{


    private $userRepository_double;
    private $orderStorageStrategy_double;

    protected function getEntityManagerStubExtraMappings()
    {
        return [
            Namespaces::ENTITIES_NS . 'User' => $this->userRepository_double,
        ];
    }
    public function setUp()
    {
        $this->userRepository_double = $this->getRepositoryDouble('UserRepository');
        $this->orderStorageStrategy_double = $this->getInterfaceWebDouble('IPlayStorageStrategy');
        parent::setUp(); // TODO: Change the autogenerated stub
    }



    /**
     * method saveOrderToStorage
     * when called
     * should returnActionResultTrue
     */
    public function test_saveOrderToStorage_called_returnActionResultTrue()
    {
        $expected = new ActionResult(true);
        $order = OrderMother::aJustOrder()->build();
        $user_id = $order->getPlayConfig()->getUser()->getId();
        $this->orderStorageStrategy_double->save($order->toJsonData(), $user_id)->willReturn(new ActionResult(true));
        $sut = $this->getSut();
        $actual = $sut->store($order);
        $this->assertEquals($expected,$actual);
    }

    /**
     * method getOrderFromStorage
     * when calledPassingAKeyValid
     * should returnActionResultTrueWithOrder
     */
    public function test_getOrderFromStorage_calledPassingAKeyValid_returnActionResultTrueWithOrder()
    {
        $order = OrderMother::aJustOrder()->build();
        $expected = new ActionResult(true, $order);
        $order_json = '{"total":5035,"fee":35,"fee_limit":12000,"single_bet_price":2500,"num_lines":2,"play_config":{"id":null,"drawDays":5,"startDrawDate":"2016-02-05 00:00:00","lastDrawDate":"2016-02-05 00:00:00","frequency":1,"euromillions_line":[{"regular":[3,8,11,16,44],"lucky":[3,5]},{"regular":[6,17,37,38,48],"lucky":[1,5]}],"user":{"id":"9098299B-14AC-4124-8DB0-19571EDABE55"}}}';
        $user = UserMother::aUserWith50Eur()->build();
        $user_id = $user->getId();
        $this->orderStorageStrategy_double->findByKey($user_id)->willReturn(new ActionResult(true,$order_json));
        $this->userRepository_double->find(['id' => $user_id])->willReturn($user);
        $sut = $this->getSut();
        $actual = $sut->get($user_id);
        $this->assertEquals($expected, $actual);
    }


    /**
     * method getOrderFromStorage
     * when calledWithAKeyValidButOrderNoExist
     * should returnActionResultFalseWithErrorMessage
     */
    public function test_getOrderFromStorage_calledWithAKeyValidButOrderNoExist_returnActionResultFalseWithErrorMessage()
    {
        $expected = new ActionResult(false, 'Order doesn\'t exist');
        $user = UserMother::aUserWith50Eur()->build();
        $user_id = $user->getId()->id();
        $this->orderStorageStrategy_double->findByKey($user_id)->willReturn(new ActionResult(false));
        $this->userRepository_double->find(['id' => $user_id])->willReturn($user);
        $sut = $this->getSut();
        $actual = $sut->get($user_id);
        $this->assertEquals($expected,$actual);
    }

    /**
     * method getOrderFromStorage
     * when calledWithAKEyValidButJsonIsMalFormed
     * should returnActionResultFalse
     */
    public function test_getOrderFromStorage_calledWithAKEyValidButJsonIsMalFormed_returnActionResultFalse()
    {
        $expected = new ActionResult(false);
        $user = UserMother::aUserWith50Eur()->build();
        $user_id = $user->getId()->id();
        $this->orderStorageStrategy_double->findByKey($user_id)->willReturn(new ActionResult(true,NULL));
        $this->userRepository_double->find(['id' => $user_id])->willReturn($user);
        $sut = $this->getSut();
        $actual = $sut->get($user_id);
        $this->assertEquals($expected,$actual);
    }

    private function getSut()
    {
        $sut = $this->getDomainServiceFactory()->getCartService($this->orderStorageStrategy_double->reveal());
        return $sut;
    }



}