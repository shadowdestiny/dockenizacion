<?php


namespace EuroMillions\tests\unit;


use EuroMillions\shared\config\Namespaces;
use EuroMillions\shared\services\SiteConfigService;
use EuroMillions\tests\base\UnitTestBase;
use EuroMillions\web\entities\SiteConfig;
use EuroMillions\web\repositories\SiteConfigRepository;
use EuroMillions\web\vo\dto\SiteConfigDTO;
use Money\Currency;
use Money\Money;
use Prophecy\Argument;

class SiteConfigServiceUnitTest extends UnitTestBase
{

    protected $currencyConversionService_double;
    protected $siteConfigRepository_double;
    protected $feeLimit;
    protected $fee;
    protected $siteConfig;



    protected function getEntityManagerStubExtraMappings()
    {
        return [
            Namespaces::ENTITIES_NS . 'SiteConfig' => $this->siteConfigRepository_double,
        ];
    }



    public function setUp()
    {
        $this->currencyConversionService_double = $this->getServiceDouble('CurrencyConversionService');
        $this->siteConfigRepository_double = $this->getRepositoryDouble('SiteConfigRepository');
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * method getSiteConfigDTO
     * when called
     * should returnProperSiteConfigDTO
     */
    public function test_getSiteConfigDTO_called_returnProperSiteConfigDTO()
    {
        $sut = $this->getSut();
        $currency = new Currency('EUR');
        $locale = 'en_GB';
        $fee_to_limit_string = 'â‚¬ 10.00';
        $fee_string = 'â‚¬ 2.50';
        $expected = new SiteConfigDTO($fee_to_limit_string, $fee_string);
        $this->currencyConversionService_double->convert($this->feeLimit,$currency)->willReturn($this->feeLimit);
        $this->currencyConversionService_double->toString($this->feeLimit,$locale)->willReturn($fee_to_limit_string);
        $this->currencyConversionService_double->convert($this->fee,$currency)->willReturn($this->fee);
        $this->currencyConversionService_double->toString($this->fee,$locale)->willReturn($fee_string);
        $actual = $sut->getSiteConfigDTO($currency,$locale);
        $this->assertInstanceOf('EuroMillions\web\vo\dto\SiteConfigDTO',$actual);
        $this->assertEquals($expected, $actual);
    }


    private function getSut()
    {
        $this->feeLimit = new Money(1200, new Currency('EUR'));
        $this->fee = new Money(250, new Currency('EUR'));
        $this->siteConfig = new SiteConfig();
        $this->siteConfig->setFeeToLimit($this->feeLimit);
        $this->siteConfig->setFee($this->fee);
        $this->siteConfigRepository_double->getSiteConfig()->willReturn([$this->siteConfig]);
        return new SiteConfigService($this->getEntityManagerRevealed(), $this->currencyConversionService_double->reveal());
    }
}