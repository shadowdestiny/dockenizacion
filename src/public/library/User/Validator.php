<?class User_Validator{	const IN_BAD_LIST = -2;	const NOT_CORRECT_LENGTH = -3;	const PATTERN_ERROR = -1;	const NOT_VALID = -4;	const IS_NUMMERIC = -5;	const OK = 1;	const IS_NULL = 0;	//	private static $username_pattern;	private static $password_pattern;	private static $email_pattern;	private static $getInitial;	public $chars = "A a B b C c D d E e F f G g H h I i J j K k L l M m N n O o P p Q q R r S s T t U u V v W w X x Y y Z z";	public $numeric = " 0 1 2 3 4 5 6 7 8 9";	public $specialChars = " ! @ * : # + / $ § % & ? \\";	public static function getInitial() {		self::$username_pattern = "^[a-zA-Z0-9]{1}[a-zA-Z0-9\-_]*[a-zA-Z0-9]{1}$";		self::$password_pattern = "^[a-zA-Z0-9\-_ !\"§$%&()=#+*.,:;@€\/]*$";		self::$email_pattern = "[öäüÖÄÜß]";	}	public function validUsername($username = NULL)	{		$tip = "";		self::getInitial();		if($username !== NULL) {			if(!is_numeric($username)) {				$len = strlen($username);				if( $len >= MIN_USERNAME && $len <= MAX_USERNAME) {					if( preg_match("/".self::$username_pattern."/", $username)) {						$bad_usernames = new Default_Model_BadUsernames();						$bad_user_names = "(".implode(")|(", $bad_usernames->getUsernames()).")";						if(!preg_match('/'.$bad_user_names.'/i', $username, $treffer)) {							$valid = self::OK;						} else {							$tip = $treffer[0];							$valid = self::IN_BAD_LIST;						}					} else {						$valid = self::PATTERN_ERROR;					}				} else {					$valid = self::NOT_CORRECT_LENGTH;				}			} else {				$valid = self::IS_NUMMERIC;			}		} else {			info("validUsername - username nicht vorhanden. File:".__FILE__);			$valid = self::IS_NULL;		}		return array('code' => $valid, 'tip' => $tip);	}	public function validPassword($password = NULL)	{		self::getInitial();		if($password !== NULL) {			$is_valid = FALSE;			$len = strlen($password);			if($len >= MIN_PWD && $len <= MAX_PWD) {				if( preg_match("/".self::$password_pattern."/", $password) ) {// @info mit Sonderzeichen			if( preg_match("/[0-9]+/", $password) && preg_match("/[\-_ !\"§$%&()=#+*.,:;@€\/]+/", $password) ) {// @info mit Zahlen					if( preg_match("/[0-9]+/", $password) ) {						$is_valid = TRUE;//					}				} else {					$is_valid = self::PATTERN_ERROR;				}			} else {				$is_valid = self::NOT_CORRECT_LENGTH;			}		} else {			info("validPassword - password nicht vorhanden. File:".__FILE__);			$is_valid = self::IS_NULL;		}		return $is_valid;	}	public function validEmail($email = NULL)	{		$tip = "";		self::getInitial();		if($email !== NULL)		{			if( preg_match("/".self::$email_pattern."/", $email)) {				info("validEmail - email enthält Umlaut: ".$email.". File: ".__FILE__);				$valid = self::PATTERN_ERROR;			} else {				$obj_validation = new Zend_Validate_EmailAddress();				if ($obj_validation->isValid($email))				{					$hostname = $obj_validation->hostname;					$bad_email = new Default_Model_BadEmail();					if( in_array(strtolower($hostname), $bad_email->getEmails()) ) {						info("validEmail - email in Blacklist: ".$email.". File: ".__FILE__);						$valid = self::IN_BAD_LIST;						$tip = $hostname;					} else {						$valid = self::OK;					}				} else {					info("validEmail - email nicht valid: ".$email.". File: ".__FILE__);					$valid = self::NOT_VALID;				}			}		} else {			info("validEmail - email nicht vorhanden. File:".__FILE__);			$valid = self::IS_NULL;		}		return array('code' => $valid, 'tip' => $tip);	}	public function validBirthdate($month=0, $day=0, $year=0)	{		if (mktime(0,0,0,$month,$day,$year) < strtotime ("-18 years")) {			info("validBirthday Birthday valid: File: ".__FILE__);			return TRUE;		} else {			info("validBirthdate  Unter 18 File: ".__FILE__);			return FALSE;		}	}	public function validDate($month=0, $day=0, $year=0)	{		if (checkdate($month, $day, $year))		{			return TRUE;		} else {			info("validDate Date nicht valid: ".$month."|".$day."|".$year.". File: ".__FILE__);			return FALSE;		}	}	public function validGender($gender_id = 0)	{		if($gender_id == 6 || $gender_id == 7)		{			return TRUE;		} else {			info("validGender Gender nicht valid: ".$gender_id.". File: ".__FILE__);			return FALSE;		}	}	public function checkMandatoryField($key, $data = NULL, $maxLen = NULL) {		$is_valid = FALSE;		if($data !== NULL)		{			$data = str_replace(array(chr(13), chr(10), chr(9)), "", $data);			$minLen = 1;			$dataLen = strlen($data);			if( $dataLen >= $minLen && $dataLen <= $maxLen )			{				$is_valid = TRUE;			}			if($is_valid)			{				info("checkMandatoryField für ".$key." ist valid. File: ".__FILE__);			}			else			{				info("checkMandatoryField für ".$key." ist nicht valid. File: ".__FILE__);			}		} else {			info("checkMandatoryField - keine Daten vorhanden. File:".__FILE__);		}		return $is_valid;	}	public function checkMaxFieldLen($key, $data = NULL, $maxLen = NULL) {		$is_valid = FALSE;		if($data !== NULL)		{			$dataLen = strlen($data);			if( $dataLen <= $maxLen )			{				$is_valid = TRUE;			}			if($is_valid)			{				info("checkMaxFieldLen für ".$key." ist valid. File: ".__FILE__);			}			else			{				info("checkMaxFieldLen für ".$key." ist nicht valid. File: ".__FILE__);			}		} else {			info("checkMaxFieldLen - keine Daten vorhanden. File:".__FILE__);		}		return $is_valid;	}	public function cleanUpString($string = "", $allowHtml = false)	{		if($string === "" || $string === FALSE) {			return $string;		} else {			if(!$allowHtml) {				$string = htmlspecialchars(strip_tags($string), ENT_COMPAT );			}			$string = trim($string);			//$string = mysql_real_escape_string($string);			return $string;		}	}	/**	 * replaces text hyperlinks with html hyperlinks	 * @param String $msg	 * @return String 	*/	public function replace_hyperlink($msg_orig)	{		$msg = preg_replace("/(http:\/\/|www|[a-zA-Z0-9-]+\.|[a-zA-Z0-9\.-]+@)(([a-zA-Z0-9-][a-zA-Z0-9-]+\.)+[a-zA-Z0-9-\.\/\_\?\%\#\&\=\;\~\!\(\)]+)/","<a href=\"http://\\1\\2\" target=\"_blank\" rel=\"nofollow\">\\1\\2</a>", $msg_orig);		$msg_change = preg_replace("/http:\/\/http:\/\//", "http://", $msg);		return $msg_change;	}	/**	 * @see returns Description with html links	 * @return String - Description with html links	 **/	public function getDescriptionHtml($msg)	{		if(empty($msg)) return "";		else return nl2br(self::replace_hyperlink($msg));	}	public function isCompleteRegistration($completeRegData) {		$complete = true;		// notwenige RegistrationsDaten eines Users (ist fix)		if(!self::validGender($completeRegData["gender_id"])) $complete = false;		if(empty($completeRegData["email"])) $complete = false;		if(empty($completeRegData["agb"])) $complete = false;		if(empty($completeRegData["username"])) $complete = false;		if(empty($completeRegData["password"])) $complete = false;		if(empty($completeRegData["birth_day"])) $complete = false;		if(empty($completeRegData["birth_month"])) $complete = false;		if(empty($completeRegData["birth_year"])) $complete = false;		if(empty($completeRegData["country_code"])) $complete = false;		if(empty($completeRegData["postal_code"])) $complete = false;		if(empty($completeRegData["place_name"])) $complete = false;		if(empty($completeRegData["admin_name1"])) $complete = false;		#if(empty($completeRegData["lang"])) $complete = false;		#if(empty($completeRegData["customer_id"])) $complete = false;		return $complete;	}}